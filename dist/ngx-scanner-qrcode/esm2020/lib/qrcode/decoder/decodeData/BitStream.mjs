// tslint:disable:no-bitwise
export class BitStream {
    constructor(bytes) {
        this.byteOffset = 0;
        this.bitOffset = 0;
        this.bytes = bytes;
    }
    readBits(numBits) {
        if (numBits < 1 || numBits > 32 || numBits > this.available()) {
            throw new Error("Cannot read " + numBits.toString() + " bits");
        }
        let result = 0;
        // First, read remainder from current byte
        if (this.bitOffset > 0) {
            const bitsLeft = 8 - this.bitOffset;
            const toRead = numBits < bitsLeft ? numBits : bitsLeft;
            const bitsToNotRead = bitsLeft - toRead;
            const mask = (0xFF >> (8 - toRead)) << bitsToNotRead;
            result = (this.bytes[this.byteOffset] & mask) >> bitsToNotRead;
            numBits -= toRead;
            this.bitOffset += toRead;
            if (this.bitOffset === 8) {
                this.bitOffset = 0;
                this.byteOffset++;
            }
        }
        // Next read whole bytes
        if (numBits > 0) {
            while (numBits >= 8) {
                result = (result << 8) | (this.bytes[this.byteOffset] & 0xFF);
                this.byteOffset++;
                numBits -= 8;
            }
            // Finally read a partial byte
            if (numBits > 0) {
                const bitsToNotRead = 8 - numBits;
                const mask = (0xFF >> bitsToNotRead) << bitsToNotRead;
                result = (result << numBits) | ((this.bytes[this.byteOffset] & mask) >> bitsToNotRead);
                this.bitOffset += numBits;
            }
        }
        return result;
    }
    available() {
        return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQml0U3RyZWFtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXNjYW5uZXItcXJjb2RlL3NyYy9saWIvcXJjb2RlL2RlY29kZXIvZGVjb2RlRGF0YS9CaXRTdHJlYW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNEJBQTRCO0FBRTVCLE1BQU0sT0FBTyxTQUFTO0lBS3BCLFlBQVksS0FBd0I7UUFINUIsZUFBVSxHQUFXLENBQUMsQ0FBQztRQUN2QixjQUFTLEdBQVcsQ0FBQyxDQUFDO1FBRzVCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLENBQUM7SUFFTSxRQUFRLENBQUMsT0FBZTtRQUM3QixJQUFJLE9BQU8sR0FBRyxDQUFDLElBQUksT0FBTyxHQUFHLEVBQUUsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQzdELE1BQU0sSUFBSSxLQUFLLENBQUMsY0FBYyxHQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxPQUFPLENBQUMsQ0FBQztTQUNoRTtRQUVELElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztRQUNmLDBDQUEwQztRQUMxQyxJQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxFQUFFO1lBQ3RCLE1BQU0sUUFBUSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ3BDLE1BQU0sTUFBTSxHQUFHLE9BQU8sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO1lBQ3ZELE1BQU0sYUFBYSxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUM7WUFDeEMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsSUFBSSxhQUFhLENBQUM7WUFDckQsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksYUFBYSxDQUFDO1lBQy9ELE9BQU8sSUFBSSxNQUFNLENBQUM7WUFDbEIsSUFBSSxDQUFDLFNBQVMsSUFBSSxNQUFNLENBQUM7WUFDekIsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLENBQUMsRUFBRTtnQkFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7Z0JBQ25CLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQzthQUNuQjtTQUNGO1FBRUQsd0JBQXdCO1FBQ3hCLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRTtZQUNmLE9BQU8sT0FBTyxJQUFJLENBQUMsRUFBRTtnQkFDbkIsTUFBTSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7Z0JBQzlELElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztnQkFDbEIsT0FBTyxJQUFJLENBQUMsQ0FBQzthQUNkO1lBRUQsOEJBQThCO1lBQzlCLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRTtnQkFDZixNQUFNLGFBQWEsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDO2dCQUNsQyxNQUFNLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxhQUFhLENBQUMsSUFBSSxhQUFhLENBQUM7Z0JBQ3RELE1BQU0sR0FBRyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksYUFBYSxDQUFDLENBQUM7Z0JBQ3ZGLElBQUksQ0FBQyxTQUFTLElBQUksT0FBTyxDQUFDO2FBQzNCO1NBQ0Y7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRU0sU0FBUztRQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDcEUsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGU6bm8tYml0d2lzZVxuXG5leHBvcnQgY2xhc3MgQml0U3RyZWFtIHtcbiAgcHJpdmF0ZSBieXRlczogVWludDhDbGFtcGVkQXJyYXk7XG4gIHByaXZhdGUgYnl0ZU9mZnNldDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBiaXRPZmZzZXQ6IG51bWJlciA9IDA7XG5cbiAgY29uc3RydWN0b3IoYnl0ZXM6IFVpbnQ4Q2xhbXBlZEFycmF5KSB7XG4gICAgdGhpcy5ieXRlcyA9IGJ5dGVzO1xuICB9XG5cbiAgcHVibGljIHJlYWRCaXRzKG51bUJpdHM6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKG51bUJpdHMgPCAxIHx8IG51bUJpdHMgPiAzMiB8fCBudW1CaXRzID4gdGhpcy5hdmFpbGFibGUoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHJlYWQgXCIgKyBudW1CaXRzLnRvU3RyaW5nKCkgKyBcIiBiaXRzXCIpO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSAwO1xuICAgIC8vIEZpcnN0LCByZWFkIHJlbWFpbmRlciBmcm9tIGN1cnJlbnQgYnl0ZVxuICAgIGlmICh0aGlzLmJpdE9mZnNldCA+IDApIHtcbiAgICAgIGNvbnN0IGJpdHNMZWZ0ID0gOCAtIHRoaXMuYml0T2Zmc2V0O1xuICAgICAgY29uc3QgdG9SZWFkID0gbnVtQml0cyA8IGJpdHNMZWZ0ID8gbnVtQml0cyA6IGJpdHNMZWZ0O1xuICAgICAgY29uc3QgYml0c1RvTm90UmVhZCA9IGJpdHNMZWZ0IC0gdG9SZWFkO1xuICAgICAgY29uc3QgbWFzayA9ICgweEZGID4+ICg4IC0gdG9SZWFkKSkgPDwgYml0c1RvTm90UmVhZDtcbiAgICAgIHJlc3VsdCA9ICh0aGlzLmJ5dGVzW3RoaXMuYnl0ZU9mZnNldF0gJiBtYXNrKSA+PiBiaXRzVG9Ob3RSZWFkO1xuICAgICAgbnVtQml0cyAtPSB0b1JlYWQ7XG4gICAgICB0aGlzLmJpdE9mZnNldCArPSB0b1JlYWQ7XG4gICAgICBpZiAodGhpcy5iaXRPZmZzZXQgPT09IDgpIHtcbiAgICAgICAgdGhpcy5iaXRPZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLmJ5dGVPZmZzZXQrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBOZXh0IHJlYWQgd2hvbGUgYnl0ZXNcbiAgICBpZiAobnVtQml0cyA+IDApIHtcbiAgICAgIHdoaWxlIChudW1CaXRzID49IDgpIHtcbiAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCA8PCA4KSB8ICh0aGlzLmJ5dGVzW3RoaXMuYnl0ZU9mZnNldF0gJiAweEZGKTtcbiAgICAgICAgdGhpcy5ieXRlT2Zmc2V0Kys7XG4gICAgICAgIG51bUJpdHMgLT0gODtcbiAgICAgIH1cblxuICAgICAgLy8gRmluYWxseSByZWFkIGEgcGFydGlhbCBieXRlXG4gICAgICBpZiAobnVtQml0cyA+IDApIHtcbiAgICAgICAgY29uc3QgYml0c1RvTm90UmVhZCA9IDggLSBudW1CaXRzO1xuICAgICAgICBjb25zdCBtYXNrID0gKDB4RkYgPj4gYml0c1RvTm90UmVhZCkgPDwgYml0c1RvTm90UmVhZDtcbiAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCA8PCBudW1CaXRzKSB8ICgodGhpcy5ieXRlc1t0aGlzLmJ5dGVPZmZzZXRdICYgbWFzaykgPj4gYml0c1RvTm90UmVhZCk7XG4gICAgICAgIHRoaXMuYml0T2Zmc2V0ICs9IG51bUJpdHM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwdWJsaWMgYXZhaWxhYmxlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIDggKiAodGhpcy5ieXRlcy5sZW5ndGggLSB0aGlzLmJ5dGVPZmZzZXQpIC0gdGhpcy5iaXRPZmZzZXQ7XG4gIH1cbn1cbiJdfQ==