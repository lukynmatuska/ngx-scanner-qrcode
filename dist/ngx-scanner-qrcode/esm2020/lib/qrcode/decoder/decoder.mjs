import { BitMatrix } from "../BitMatrix";
import { decode as decodeData } from "./decodeData";
import { decode as rsDecode } from "./reedsolomon";
import { VERSIONS } from "./version";
// tslint:disable:no-bitwise
function numBitsDiffering(x, y) {
    let z = x ^ y;
    let bitCount = 0;
    while (z) {
        bitCount++;
        z &= z - 1;
    }
    return bitCount;
}
function pushBit(bit, byte) {
    return (byte << 1) | bit;
}
// tslint:enable:no-bitwise
const FORMAT_INFO_TABLE = [
    { bits: 0x5412, formatInfo: { errorCorrectionLevel: 1, dataMask: 0 } },
    { bits: 0x5125, formatInfo: { errorCorrectionLevel: 1, dataMask: 1 } },
    { bits: 0x5E7C, formatInfo: { errorCorrectionLevel: 1, dataMask: 2 } },
    { bits: 0x5B4B, formatInfo: { errorCorrectionLevel: 1, dataMask: 3 } },
    { bits: 0x45F9, formatInfo: { errorCorrectionLevel: 1, dataMask: 4 } },
    { bits: 0x40CE, formatInfo: { errorCorrectionLevel: 1, dataMask: 5 } },
    { bits: 0x4F97, formatInfo: { errorCorrectionLevel: 1, dataMask: 6 } },
    { bits: 0x4AA0, formatInfo: { errorCorrectionLevel: 1, dataMask: 7 } },
    { bits: 0x77C4, formatInfo: { errorCorrectionLevel: 0, dataMask: 0 } },
    { bits: 0x72F3, formatInfo: { errorCorrectionLevel: 0, dataMask: 1 } },
    { bits: 0x7DAA, formatInfo: { errorCorrectionLevel: 0, dataMask: 2 } },
    { bits: 0x789D, formatInfo: { errorCorrectionLevel: 0, dataMask: 3 } },
    { bits: 0x662F, formatInfo: { errorCorrectionLevel: 0, dataMask: 4 } },
    { bits: 0x6318, formatInfo: { errorCorrectionLevel: 0, dataMask: 5 } },
    { bits: 0x6C41, formatInfo: { errorCorrectionLevel: 0, dataMask: 6 } },
    { bits: 0x6976, formatInfo: { errorCorrectionLevel: 0, dataMask: 7 } },
    { bits: 0x1689, formatInfo: { errorCorrectionLevel: 3, dataMask: 0 } },
    { bits: 0x13BE, formatInfo: { errorCorrectionLevel: 3, dataMask: 1 } },
    { bits: 0x1CE7, formatInfo: { errorCorrectionLevel: 3, dataMask: 2 } },
    { bits: 0x19D0, formatInfo: { errorCorrectionLevel: 3, dataMask: 3 } },
    { bits: 0x0762, formatInfo: { errorCorrectionLevel: 3, dataMask: 4 } },
    { bits: 0x0255, formatInfo: { errorCorrectionLevel: 3, dataMask: 5 } },
    { bits: 0x0D0C, formatInfo: { errorCorrectionLevel: 3, dataMask: 6 } },
    { bits: 0x083B, formatInfo: { errorCorrectionLevel: 3, dataMask: 7 } },
    { bits: 0x355F, formatInfo: { errorCorrectionLevel: 2, dataMask: 0 } },
    { bits: 0x3068, formatInfo: { errorCorrectionLevel: 2, dataMask: 1 } },
    { bits: 0x3F31, formatInfo: { errorCorrectionLevel: 2, dataMask: 2 } },
    { bits: 0x3A06, formatInfo: { errorCorrectionLevel: 2, dataMask: 3 } },
    { bits: 0x24B4, formatInfo: { errorCorrectionLevel: 2, dataMask: 4 } },
    { bits: 0x2183, formatInfo: { errorCorrectionLevel: 2, dataMask: 5 } },
    { bits: 0x2EDA, formatInfo: { errorCorrectionLevel: 2, dataMask: 6 } },
    { bits: 0x2BED, formatInfo: { errorCorrectionLevel: 2, dataMask: 7 } },
];
const DATA_MASKS = [
    (p) => ((p.y + p.x) % 2) === 0,
    (p) => (p.y % 2) === 0,
    (p) => p.x % 3 === 0,
    (p) => (p.y + p.x) % 3 === 0,
    (p) => (Math.floor(p.y / 2) + Math.floor(p.x / 3)) % 2 === 0,
    (p) => ((p.x * p.y) % 2) + ((p.x * p.y) % 3) === 0,
    (p) => ((((p.y * p.x) % 2) + (p.y * p.x) % 3) % 2) === 0,
    (p) => ((((p.y + p.x) % 2) + (p.y * p.x) % 3) % 2) === 0,
];
function buildFunctionPatternMask(version) {
    const dimension = 17 + 4 * version.versionNumber;
    const matrix = BitMatrix.createEmpty(dimension, dimension);
    matrix.setRegion(0, 0, 9, 9, true); // Top left finder pattern + separator + format
    matrix.setRegion(dimension - 8, 0, 8, 9, true); // Top right finder pattern + separator + format
    matrix.setRegion(0, dimension - 8, 9, 8, true); // Bottom left finder pattern + separator + format
    // Alignment patterns
    for (const x of version.alignmentPatternCenters) {
        for (const y of version.alignmentPatternCenters) {
            if (!(x === 6 && y === 6 || x === 6 && y === dimension - 7 || x === dimension - 7 && y === 6)) {
                matrix.setRegion(x - 2, y - 2, 5, 5, true);
            }
        }
    }
    matrix.setRegion(6, 9, 1, dimension - 17, true); // Vertical timing pattern
    matrix.setRegion(9, 6, dimension - 17, 1, true); // Horizontal timing pattern
    if (version.versionNumber > 6) {
        matrix.setRegion(dimension - 11, 0, 3, 6, true); // Version info, top right
        matrix.setRegion(0, dimension - 11, 6, 3, true); // Version info, bottom left
    }
    return matrix;
}
function readCodewords(matrix, version, formatInfo) {
    const dataMask = DATA_MASKS[formatInfo.dataMask];
    const dimension = matrix.height;
    const functionPatternMask = buildFunctionPatternMask(version);
    const codewords = [];
    let currentByte = 0;
    let bitsRead = 0;
    // Read columns in pairs, from right to left
    let readingUp = true;
    for (let columnIndex = dimension - 1; columnIndex > 0; columnIndex -= 2) {
        if (columnIndex === 6) { // Skip whole column with vertical alignment pattern;
            columnIndex--;
        }
        for (let i = 0; i < dimension; i++) {
            const y = readingUp ? dimension - 1 - i : i;
            for (let columnOffset = 0; columnOffset < 2; columnOffset++) {
                const x = columnIndex - columnOffset;
                if (!functionPatternMask.get(x, y)) {
                    bitsRead++;
                    let bit = matrix.get(x, y);
                    if (dataMask({ y, x })) {
                        bit = !bit;
                    }
                    currentByte = pushBit(bit, currentByte);
                    if (bitsRead === 8) { // Whole bytes
                        codewords.push(currentByte);
                        bitsRead = 0;
                        currentByte = 0;
                    }
                }
            }
        }
        readingUp = !readingUp;
    }
    return codewords;
}
function readVersion(matrix) {
    const dimension = matrix.height;
    const provisionalVersion = Math.floor((dimension - 17) / 4);
    if (provisionalVersion <= 6) { // 6 and under dont have version info in the QR code
        return VERSIONS[provisionalVersion - 1];
    }
    let topRightVersionBits = 0;
    for (let y = 5; y >= 0; y--) {
        for (let x = dimension - 9; x >= dimension - 11; x--) {
            topRightVersionBits = pushBit(matrix.get(x, y), topRightVersionBits);
        }
    }
    let bottomLeftVersionBits = 0;
    for (let x = 5; x >= 0; x--) {
        for (let y = dimension - 9; y >= dimension - 11; y--) {
            bottomLeftVersionBits = pushBit(matrix.get(x, y), bottomLeftVersionBits);
        }
    }
    let bestDifference = Infinity;
    let bestVersion;
    for (const version of VERSIONS) {
        if (version.infoBits === topRightVersionBits || version.infoBits === bottomLeftVersionBits) {
            return version;
        }
        let difference = numBitsDiffering(topRightVersionBits, version.infoBits);
        if (difference < bestDifference) {
            bestVersion = version;
            bestDifference = difference;
        }
        difference = numBitsDiffering(bottomLeftVersionBits, version.infoBits);
        if (difference < bestDifference) {
            bestVersion = version;
            bestDifference = difference;
        }
    }
    // We can tolerate up to 3 bits of error since no two version info codewords will
    // differ in less than 8 bits.
    if (bestDifference <= 3) {
        return bestVersion;
    }
}
function readFormatInformation(matrix) {
    let topLeftFormatInfoBits = 0;
    for (let x = 0; x <= 8; x++) {
        if (x !== 6) { // Skip timing pattern bit
            topLeftFormatInfoBits = pushBit(matrix.get(x, 8), topLeftFormatInfoBits);
        }
    }
    for (let y = 7; y >= 0; y--) {
        if (y !== 6) { // Skip timing pattern bit
            topLeftFormatInfoBits = pushBit(matrix.get(8, y), topLeftFormatInfoBits);
        }
    }
    const dimension = matrix.height;
    let topRightBottomRightFormatInfoBits = 0;
    for (let y = dimension - 1; y >= dimension - 7; y--) { // bottom left
        topRightBottomRightFormatInfoBits = pushBit(matrix.get(8, y), topRightBottomRightFormatInfoBits);
    }
    for (let x = dimension - 8; x < dimension; x++) { // top right
        topRightBottomRightFormatInfoBits = pushBit(matrix.get(x, 8), topRightBottomRightFormatInfoBits);
    }
    let bestDifference = Infinity;
    let bestFormatInfo = null;
    for (const { bits, formatInfo } of FORMAT_INFO_TABLE) {
        if (bits === topLeftFormatInfoBits || bits === topRightBottomRightFormatInfoBits) {
            return formatInfo;
        }
        let difference = numBitsDiffering(topLeftFormatInfoBits, bits);
        if (difference < bestDifference) {
            bestFormatInfo = formatInfo;
            bestDifference = difference;
        }
        if (topLeftFormatInfoBits !== topRightBottomRightFormatInfoBits) { // also try the other option
            difference = numBitsDiffering(topRightBottomRightFormatInfoBits, bits);
            if (difference < bestDifference) {
                bestFormatInfo = formatInfo;
                bestDifference = difference;
            }
        }
    }
    // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits differing means we found a match
    if (bestDifference <= 3) {
        return bestFormatInfo;
    }
    return null;
}
function getDataBlocks(codewords, version, ecLevel) {
    const ecInfo = version.errorCorrectionLevels[ecLevel];
    const dataBlocks = [];
    let totalCodewords = 0;
    ecInfo.ecBlocks.forEach(block => {
        for (let i = 0; i < block.numBlocks; i++) {
            dataBlocks.push({ numDataCodewords: block.dataCodewordsPerBlock, codewords: [] });
            totalCodewords += block.dataCodewordsPerBlock + ecInfo.ecCodewordsPerBlock;
        }
    });
    // In some cases the QR code will be malformed enough that we pull off more or less than we should.
    // If we pull off less there's nothing we can do.
    // If we pull off more we can safely truncate
    if (codewords.length < totalCodewords) {
        return null;
    }
    codewords = codewords.slice(0, totalCodewords);
    const shortBlockSize = ecInfo.ecBlocks[0].dataCodewordsPerBlock;
    // Pull codewords to fill the blocks up to the minimum size
    for (let i = 0; i < shortBlockSize; i++) {
        for (const dataBlock of dataBlocks) {
            dataBlock.codewords.push(codewords.shift());
        }
    }
    // If there are any large blocks, pull codewords to fill the last element of those
    if (ecInfo.ecBlocks.length > 1) {
        const smallBlockCount = ecInfo.ecBlocks[0].numBlocks;
        const largeBlockCount = ecInfo.ecBlocks[1].numBlocks;
        for (let i = 0; i < largeBlockCount; i++) {
            dataBlocks[smallBlockCount + i].codewords.push(codewords.shift());
        }
    }
    // Add the rest of the codewords to the blocks. These are the error correction codewords.
    while (codewords.length > 0) {
        for (const dataBlock of dataBlocks) {
            dataBlock.codewords.push(codewords.shift());
        }
    }
    return dataBlocks;
}
function decodeMatrix(matrix) {
    const version = readVersion(matrix);
    if (!version) {
        return null;
    }
    const formatInfo = readFormatInformation(matrix);
    if (!formatInfo) {
        return null;
    }
    const codewords = readCodewords(matrix, version, formatInfo);
    const dataBlocks = getDataBlocks(codewords, version, formatInfo.errorCorrectionLevel);
    if (!dataBlocks) {
        return null;
    }
    // Count total number of data bytes
    const totalBytes = dataBlocks.reduce((a, b) => a + b.numDataCodewords, 0);
    const resultBytes = new Uint8ClampedArray(totalBytes);
    let resultIndex = 0;
    for (const dataBlock of dataBlocks) {
        const correctedBytes = rsDecode(dataBlock.codewords, dataBlock.codewords.length - dataBlock.numDataCodewords);
        if (!correctedBytes) {
            return null;
        }
        for (let i = 0; i < dataBlock.numDataCodewords; i++) {
            resultBytes[resultIndex++] = correctedBytes[i];
        }
    }
    try {
        return decodeData(resultBytes, version.versionNumber);
    }
    catch {
        return null;
    }
}
export function decode(matrix) {
    if (matrix == null) {
        return null;
    }
    const result = decodeMatrix(matrix);
    if (result) {
        return result;
    }
    // Decoding didn't work, try mirroring the QR across the topLeft -> bottomRight line.
    for (let x = 0; x < matrix.width; x++) {
        for (let y = x + 1; y < matrix.height; y++) {
            if (matrix.get(x, y) !== matrix.get(y, x)) {
                matrix.set(x, y, !matrix.get(x, y));
                matrix.set(y, x, !matrix.get(y, x));
            }
        }
    }
    return decodeMatrix(matrix);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb2Rlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zY2FubmVyLXFyY29kZS9zcmMvbGliL3FyY29kZS9kZWNvZGVyL2RlY29kZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV6QyxPQUFPLEVBQUUsTUFBTSxJQUFJLFVBQVUsRUFBYSxNQUFNLGNBQWMsQ0FBQztBQUMvRCxPQUFPLEVBQUUsTUFBTSxJQUFJLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQVcsUUFBUSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRTlDLDRCQUE0QjtBQUM1QixTQUFTLGdCQUFnQixDQUFDLENBQVMsRUFBRSxDQUFTO0lBQzVDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDZCxJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDakIsT0FBTyxDQUFDLEVBQUU7UUFDUixRQUFRLEVBQUUsQ0FBQztRQUNYLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ1o7SUFDRCxPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDO0FBRUQsU0FBUyxPQUFPLENBQUMsR0FBUSxFQUFFLElBQVk7SUFDckMsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDM0IsQ0FBQztBQUNELDJCQUEyQjtBQUUzQixNQUFNLGlCQUFpQixHQUFHO0lBQ3hCLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0NBQ3ZFLENBQUM7QUFFRixNQUFNLFVBQVUsR0FBRztJQUNqQixDQUFDLENBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDckMsQ0FBQyxDQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzdCLENBQUMsQ0FBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO0lBQzNCLENBQUMsQ0FBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO0lBQ25DLENBQUMsQ0FBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztJQUNuRSxDQUFDLENBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ3pELENBQUMsQ0FBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxH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LENBQUMsRUFBRTtnQkFDekMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDcEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNyQztTQUNGO0tBQ0Y7SUFDRCxPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM5QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQml0TWF0cml4IH0gZnJvbSBcIi4uL0JpdE1hdHJpeFwiO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tIFwiLi4vUG9pbnRcIjtcbmltcG9ydCB7IGRlY29kZSBhcyBkZWNvZGVEYXRhLCBEZWNvZGVkUVIgfSBmcm9tIFwiLi9kZWNvZGVEYXRhXCI7XG5pbXBvcnQgeyBkZWNvZGUgYXMgcnNEZWNvZGUgfSBmcm9tIFwiLi9yZWVkc29sb21vblwiO1xuaW1wb3J0IHsgVmVyc2lvbiwgVkVSU0lPTlMgfSBmcm9tIFwiLi92ZXJzaW9uXCI7XG5cbi8vIHRzbGludDpkaXNhYmxlOm5vLWJpdHdpc2VcbmZ1bmN0aW9uIG51bUJpdHNEaWZmZXJpbmcoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgbGV0IHogPSB4IF4geTtcbiAgbGV0IGJpdENvdW50ID0gMDtcbiAgd2hpbGUgKHopIHtcbiAgICBiaXRDb3VudCsrO1xuICAgIHogJj0geiAtIDE7XG4gIH1cbiAgcmV0dXJuIGJpdENvdW50O1xufVxuXG5mdW5jdGlvbiBwdXNoQml0KGJpdDogYW55LCBieXRlOiBudW1iZXIpIHtcbiAgcmV0dXJuIChieXRlIDw8IDEpIHwgYml0O1xufVxuLy8gdHNsaW50OmVuYWJsZTpuby1iaXR3aXNlXG5cbmNvbnN0IEZPUk1BVF9JTkZPX1RBQkxFID0gW1xuICB7IGJpdHM6IDB4NTQxMiwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMSwgZGF0YU1hc2s6IDAgfSB9LFxuICB7IGJpdHM6IDB4NTEyNSwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMSwgZGF0YU1hc2s6IDEgfSB9LFxuICB7IGJpdHM6IDB4NUU3QywgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMSwgZGF0YU1hc2s6IDIgfSB9LFxuICB7IGJpdHM6IDB4NUI0QiwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMSwgZGF0YU1hc2s6IDMgfSB9LFxuICB7IGJpdHM6IDB4NDVGOSwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMSwgZGF0YU1hc2s6IDQgfSB9LFxuICB7IGJpdHM6IDB4NDBDRSwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMSwgZGF0YU1hc2s6IDUgfSB9LFxuICB7IGJpdHM6IDB4NEY5NywgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMSwgZGF0YU1hc2s6IDYgfSB9LFxuICB7IGJpdHM6IDB4NEFBMCwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMSwgZGF0YU1hc2s6IDcgfSB9LFxuICB7IGJpdHM6IDB4NzdDNCwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMCwgZGF0YU1hc2s6IDAgfSB9LFxuICB7IGJpdHM6IDB4NzJGMywgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMCwgZGF0YU1hc2s6IDEgfSB9LFxuICB7IGJpdHM6IDB4N0RBQSwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMCwgZGF0YU1hc2s6IDIgfSB9LFxuICB7IGJpdHM6IDB4Nzg5RCwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMCwgZGF0YU1hc2s6IDMgfSB9LFxuICB7IGJpdHM6IDB4NjYyRiwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMCwgZGF0YU1hc2s6IDQgfSB9LFxuICB7IGJpdHM6IDB4NjMxOCwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMCwgZGF0YU1hc2s6IDUgfSB9LFxuICB7IGJpdHM6IDB4NkM0MSwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMCwgZGF0YU1hc2s6IDYgfSB9LFxuICB7IGJpdHM6IDB4Njk3NiwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMCwgZGF0YU1hc2s6IDcgfSB9LFxuICB7IGJpdHM6IDB4MTY4OSwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMywgZGF0YU1hc2s6IDAgfSB9LFxuICB7IGJpdHM6IDB4MTNCRSwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMywgZGF0YU1hc2s6IDEgfSB9LFxuICB7IGJpdHM6IDB4MUNFNywgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMywgZGF0YU1hc2s6IDIgfSB9LFxuICB7IGJpdHM6IDB4MTlEMCwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMywgZGF0YU1hc2s6IDMgfSB9LFxuICB7IGJpdHM6IDB4MDc2MiwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMywgZGF0YU1hc2s6IDQgfSB9LFxuICB7IGJpdHM6IDB4MDI1NSwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMywgZGF0YU1hc2s6IDUgfSB9LFxuICB7IGJpdHM6IDB4MEQwQywgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMywgZGF0YU1hc2s6IDYgfSB9LFxuICB7IGJpdHM6IDB4MDgzQiwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMywgZGF0YU1hc2s6IDcgfSB9LFxuICB7IGJpdHM6IDB4MzU1RiwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMiwgZGF0YU1hc2s6IDAgfSB9LFxuICB7IGJpdHM6IDB4MzA2OCwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMiwgZGF0YU1hc2s6IDEgfSB9LFxuICB7IGJpdHM6IDB4M0YzMSwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMiwgZGF0YU1hc2s6IDIgfSB9LFxuICB7IGJpdHM6IDB4M0EwNiwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMiwgZGF0YU1hc2s6IDMgfSB9LFxuICB7IGJpdHM6IDB4MjRCNCwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMiwgZGF0YU1hc2s6IDQgfSB9LFxuICB7IGJpdHM6IDB4MjE4MywgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMiwgZGF0YU1hc2s6IDUgfSB9LFxuICB7IGJpdHM6IDB4MkVEQSwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMiwgZGF0YU1hc2s6IDYgfSB9LFxuICB7IGJpdHM6IDB4MkJFRCwgZm9ybWF0SW5mbzogeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogMiwgZGF0YU1hc2s6IDcgfSB9LFxuXTtcblxuY29uc3QgREFUQV9NQVNLUyA9IFtcbiAgKHA6IFBvaW50KSA9PiAoKHAueSArIHAueCkgJSAyKSA9PT0gMCxcbiAgKHA6IFBvaW50KSA9PiAocC55ICUgMikgPT09IDAsXG4gIChwOiBQb2ludCkgPT4gcC54ICUgMyA9PT0gMCxcbiAgKHA6IFBvaW50KSA9PiAocC55ICsgcC54KSAlIDMgPT09IDAsXG4gIChwOiBQb2ludCkgPT4gKE1hdGguZmxvb3IocC55IC8gMikgKyBNYXRoLmZsb29yKHAueCAvIDMpKSAlIDIgPT09IDAsXG4gIChwOiBQb2ludCkgPT4gKChwLnggKiBwLnkpICUgMikgKyAoKHAueCAqIHAueSkgJSAzKSA9PT0gMCxcbiAgKHA6IFBvaW50KSA9PiAoKCgocC55ICogcC54KSAlIDIpICsgKHAueSAqIHAueCkgJSAzKSAlIDIpID09PSAwLFxuICAocDogUG9pbnQpID0+ICgoKChwLnkgKyBwLngpICUgMikgKyAocC55ICogcC54KSAlIDMpICUgMikgPT09IDAsXG5dO1xuXG5pbnRlcmZhY2UgRm9ybWF0SW5mb3JtYXRpb24ge1xuICBlcnJvckNvcnJlY3Rpb25MZXZlbDogbnVtYmVyO1xuICBkYXRhTWFzazogbnVtYmVyO1xufVxuXG5mdW5jdGlvbiBidWlsZEZ1bmN0aW9uUGF0dGVybk1hc2sodmVyc2lvbjogVmVyc2lvbik6IEJpdE1hdHJpeCB7XG4gIGNvbnN0IGRpbWVuc2lvbiA9IDE3ICsgNCAqIHZlcnNpb24udmVyc2lvbk51bWJlcjtcbiAgY29uc3QgbWF0cml4ID0gQml0TWF0cml4LmNyZWF0ZUVtcHR5KGRpbWVuc2lvbiwgZGltZW5zaW9uKTtcblxuICBtYXRyaXguc2V0UmVnaW9uKDAsIDAsIDksIDksIHRydWUpOyAvLyBUb3AgbGVmdCBmaW5kZXIgcGF0dGVybiArIHNlcGFyYXRvciArIGZvcm1hdFxuICBtYXRyaXguc2V0UmVnaW9uKGRpbWVuc2lvbiAtIDgsIDAsIDgsIDksIHRydWUpOyAvLyBUb3AgcmlnaHQgZmluZGVyIHBhdHRlcm4gKyBzZXBhcmF0b3IgKyBmb3JtYXRcbiAgbWF0cml4LnNldFJlZ2lvbigwLCBkaW1lbnNpb24gLSA4LCA5LCA4LCB0cnVlKTsgLy8gQm90dG9tIGxlZnQgZmluZGVyIHBhdHRlcm4gKyBzZXBhcmF0b3IgKyBmb3JtYXRcblxuICAvLyBBbGlnbm1lbnQgcGF0dGVybnNcbiAgZm9yIChjb25zdCB4IG9mIHZlcnNpb24uYWxpZ25tZW50UGF0dGVybkNlbnRlcnMpIHtcbiAgICBmb3IgKGNvbnN0IHkgb2YgdmVyc2lvbi5hbGlnbm1lbnRQYXR0ZXJuQ2VudGVycykge1xuICAgICAgaWYgKCEoeCA9PT0gNiAmJiB5ID09PSA2IHx8IHggPT09IDYgJiYgeSA9PT0gZGltZW5zaW9uIC0gNyB8fCB4ID09PSBkaW1lbnNpb24gLSA3ICYmIHkgPT09IDYpKSB7XG4gICAgICAgIG1hdHJpeC5zZXRSZWdpb24oeCAtIDIsIHkgLSAyLCA1LCA1LCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBtYXRyaXguc2V0UmVnaW9uKDYsIDksIDEsIGRpbWVuc2lvbiAtIDE3LCB0cnVlKTsgLy8gVmVydGljYWwgdGltaW5nIHBhdHRlcm5cbiAgbWF0cml4LnNldFJlZ2lvbig5LCA2LCBkaW1lbnNpb24gLSAxNywgMSwgdHJ1ZSk7IC8vIEhvcml6b250YWwgdGltaW5nIHBhdHRlcm5cblxuICBpZiAodmVyc2lvbi52ZXJzaW9uTnVtYmVyID4gNikge1xuICAgIG1hdHJpeC5zZXRSZWdpb24oZGltZW5zaW9uIC0gMTEsIDAsIDMsIDYsIHRydWUpOyAvLyBWZXJzaW9uIGluZm8sIHRvcCByaWdodFxuICAgIG1hdHJpeC5zZXRSZWdpb24oMCwgZGltZW5zaW9uIC0gMTEsIDYsIDMsIHRydWUpOyAvLyBWZXJzaW9uIGluZm8sIGJvdHRvbSBsZWZ0XG4gIH1cblxuICByZXR1cm4gbWF0cml4O1xufVxuXG5mdW5jdGlvbiByZWFkQ29kZXdvcmRzKG1hdHJpeDogQml0TWF0cml4LCB2ZXJzaW9uOiBWZXJzaW9uLCBmb3JtYXRJbmZvOiBGb3JtYXRJbmZvcm1hdGlvbikge1xuICBjb25zdCBkYXRhTWFzayA9IERBVEFfTUFTS1NbZm9ybWF0SW5mby5kYXRhTWFza107XG4gIGNvbnN0IGRpbWVuc2lvbiA9IG1hdHJpeC5oZWlnaHQ7XG5cbiAgY29uc3QgZnVuY3Rpb25QYXR0ZXJuTWFzayA9IGJ1aWxkRnVuY3Rpb25QYXR0ZXJuTWFzayh2ZXJzaW9uKTtcblxuICBjb25zdCBjb2Rld29yZHM6IG51bWJlcltdID0gW107XG4gIGxldCBjdXJyZW50Qnl0ZSA9IDA7XG4gIGxldCBiaXRzUmVhZCA9IDA7XG5cbiAgLy8gUmVhZCBjb2x1bW5zIGluIHBhaXJzLCBmcm9tIHJpZ2h0IHRvIGxlZnRcbiAgbGV0IHJlYWRpbmdVcCA9IHRydWU7XG4gIGZvciAobGV0IGNvbHVtbkluZGV4ID0gZGltZW5zaW9uIC0gMTsgY29sdW1uSW5kZXggPiAwOyBjb2x1bW5JbmRleCAtPSAyKSB7XG4gICAgaWYgKGNvbHVtbkluZGV4ID09PSA2KSB7IC8vIFNraXAgd2hvbGUgY29sdW1uIHdpdGggdmVydGljYWwgYWxpZ25tZW50IHBhdHRlcm47XG4gICAgICBjb2x1bW5JbmRleC0tO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpbWVuc2lvbjsgaSsrKSB7XG4gICAgICBjb25zdCB5ID0gcmVhZGluZ1VwID8gZGltZW5zaW9uIC0gMSAtIGkgOiBpO1xuICAgICAgZm9yIChsZXQgY29sdW1uT2Zmc2V0ID0gMDsgY29sdW1uT2Zmc2V0IDwgMjsgY29sdW1uT2Zmc2V0KyspIHtcbiAgICAgICAgY29uc3QgeCA9IGNvbHVtbkluZGV4IC0gY29sdW1uT2Zmc2V0O1xuICAgICAgICBpZiAoIWZ1bmN0aW9uUGF0dGVybk1hc2suZ2V0KHgsIHkpKSB7XG4gICAgICAgICAgYml0c1JlYWQrKztcbiAgICAgICAgICBsZXQgYml0ID0gbWF0cml4LmdldCh4LCB5KTtcbiAgICAgICAgICBpZiAoZGF0YU1hc2soe3ksIHh9KSkge1xuICAgICAgICAgICAgYml0ID0gIWJpdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudEJ5dGUgPSBwdXNoQml0KGJpdCwgY3VycmVudEJ5dGUpO1xuICAgICAgICAgIGlmIChiaXRzUmVhZCA9PT0gOCkgeyAvLyBXaG9sZSBieXRlc1xuICAgICAgICAgICAgY29kZXdvcmRzLnB1c2goY3VycmVudEJ5dGUpO1xuICAgICAgICAgICAgYml0c1JlYWQgPSAwO1xuICAgICAgICAgICAgY3VycmVudEJ5dGUgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZWFkaW5nVXAgPSAhcmVhZGluZ1VwO1xuICB9XG4gIHJldHVybiBjb2Rld29yZHM7XG59XG5cbmZ1bmN0aW9uIHJlYWRWZXJzaW9uKG1hdHJpeDogQml0TWF0cml4KTogVmVyc2lvbiB7XG4gIGNvbnN0IGRpbWVuc2lvbiA9IG1hdHJpeC5oZWlnaHQ7XG5cbiAgY29uc3QgcHJvdmlzaW9uYWxWZXJzaW9uID0gTWF0aC5mbG9vcigoZGltZW5zaW9uIC0gMTcpIC8gNCk7XG4gIGlmIChwcm92aXNpb25hbFZlcnNpb24gPD0gNikgeyAvLyA2IGFuZCB1bmRlciBkb250IGhhdmUgdmVyc2lvbiBpbmZvIGluIHRoZSBRUiBjb2RlXG4gICAgcmV0dXJuIFZFUlNJT05TW3Byb3Zpc2lvbmFsVmVyc2lvbiAtIDFdO1xuICB9XG5cbiAgbGV0IHRvcFJpZ2h0VmVyc2lvbkJpdHMgPSAwO1xuICBmb3IgKGxldCB5ID0gNTsgeSA+PSAwOyB5LS0pIHtcbiAgICBmb3IgKGxldCB4ID0gZGltZW5zaW9uIC0gOTsgeCA+PSBkaW1lbnNpb24gLSAxMTsgeC0tKSB7XG4gICAgICB0b3BSaWdodFZlcnNpb25CaXRzID0gcHVzaEJpdChtYXRyaXguZ2V0KHgsIHkpLCB0b3BSaWdodFZlcnNpb25CaXRzKTtcbiAgICB9XG4gIH1cblxuICBsZXQgYm90dG9tTGVmdFZlcnNpb25CaXRzID0gMDtcbiAgZm9yIChsZXQgeCA9IDU7IHggPj0gMDsgeC0tKSB7XG4gICAgZm9yIChsZXQgeSA9IGRpbWVuc2lvbiAtIDk7IHkgPj0gZGltZW5zaW9uIC0gMTE7IHktLSkge1xuICAgICAgYm90dG9tTGVmdFZlcnNpb25CaXRzID0gcHVzaEJpdChtYXRyaXguZ2V0KHgsIHkpLCBib3R0b21MZWZ0VmVyc2lvbkJpdHMpO1xuICAgIH1cbiAgfVxuXG4gIGxldCBiZXN0RGlmZmVyZW5jZSA9IEluZmluaXR5O1xuICBsZXQgYmVzdFZlcnNpb246IFZlcnNpb247XG4gIGZvciAoY29uc3QgdmVyc2lvbiBvZiBWRVJTSU9OUykge1xuICAgIGlmICh2ZXJzaW9uLmluZm9CaXRzID09PSB0b3BSaWdodFZlcnNpb25CaXRzIHx8IHZlcnNpb24uaW5mb0JpdHMgPT09IGJvdHRvbUxlZnRWZXJzaW9uQml0cykge1xuICAgICAgcmV0dXJuIHZlcnNpb247XG4gICAgfVxuXG4gICAgbGV0IGRpZmZlcmVuY2UgPSBudW1CaXRzRGlmZmVyaW5nKHRvcFJpZ2h0VmVyc2lvbkJpdHMsIHZlcnNpb24uaW5mb0JpdHMpO1xuICAgIGlmIChkaWZmZXJlbmNlIDwgYmVzdERpZmZlcmVuY2UpIHtcbiAgICAgIGJlc3RWZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgIGJlc3REaWZmZXJlbmNlID0gZGlmZmVyZW5jZTtcbiAgICB9XG5cbiAgICBkaWZmZXJlbmNlID0gbnVtQml0c0RpZmZlcmluZyhib3R0b21MZWZ0VmVyc2lvbkJpdHMsIHZlcnNpb24uaW5mb0JpdHMpO1xuICAgIGlmIChkaWZmZXJlbmNlIDwgYmVzdERpZmZlcmVuY2UpIHtcbiAgICAgIGJlc3RWZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgIGJlc3REaWZmZXJlbmNlID0gZGlmZmVyZW5jZTtcbiAgICB9XG4gIH1cbiAgLy8gV2UgY2FuIHRvbGVyYXRlIHVwIHRvIDMgYml0cyBvZiBlcnJvciBzaW5jZSBubyB0d28gdmVyc2lvbiBpbmZvIGNvZGV3b3JkcyB3aWxsXG4gIC8vIGRpZmZlciBpbiBsZXNzIHRoYW4gOCBiaXRzLlxuICBpZiAoYmVzdERpZmZlcmVuY2UgPD0gMykge1xuICAgIHJldHVybiBiZXN0VmVyc2lvbjtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWFkRm9ybWF0SW5mb3JtYXRpb24obWF0cml4OiBCaXRNYXRyaXgpIHtcbiAgbGV0IHRvcExlZnRGb3JtYXRJbmZvQml0cyA9IDA7XG4gIGZvciAobGV0IHggPSAwOyB4IDw9IDg7IHgrKykge1xuICAgIGlmICh4ICE9PSA2KSB7IC8vIFNraXAgdGltaW5nIHBhdHRlcm4gYml0XG4gICAgICB0b3BMZWZ0Rm9ybWF0SW5mb0JpdHMgPSBwdXNoQml0KG1hdHJpeC5nZXQoeCwgOCksIHRvcExlZnRGb3JtYXRJbmZvQml0cyk7XG4gICAgfVxuICB9XG4gIGZvciAobGV0IHkgPSA3OyB5ID49IDA7IHktLSkge1xuICAgIGlmICh5ICE9PSA2KSB7IC8vIFNraXAgdGltaW5nIHBhdHRlcm4gYml0XG4gICAgICB0b3BMZWZ0Rm9ybWF0SW5mb0JpdHMgPSBwdXNoQml0KG1hdHJpeC5nZXQoOCwgeSksIHRvcExlZnRGb3JtYXRJbmZvQml0cyk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgZGltZW5zaW9uID0gbWF0cml4LmhlaWdodDtcbiAgbGV0IHRvcFJpZ2h0Qm90dG9tUmlnaHRGb3JtYXRJbmZvQml0cyA9IDA7XG4gIGZvciAobGV0IHkgPSBkaW1lbnNpb24gLSAxOyB5ID49IGRpbWVuc2lvbiAtIDc7IHktLSkgeyAvLyBib3R0b20gbGVmdFxuICAgIHRvcFJpZ2h0Qm90dG9tUmlnaHRGb3JtYXRJbmZvQml0cyA9IHB1c2hCaXQobWF0cml4LmdldCg4LCB5KSwgdG9wUmlnaHRCb3R0b21SaWdodEZvcm1hdEluZm9CaXRzKTtcbiAgfVxuICBmb3IgKGxldCB4ID0gZGltZW5zaW9uIC0gODsgeCA8IGRpbWVuc2lvbjsgeCsrKSB7IC8vIHRvcCByaWdodFxuICAgIHRvcFJpZ2h0Qm90dG9tUmlnaHRGb3JtYXRJbmZvQml0cyA9IHB1c2hCaXQobWF0cml4LmdldCh4LCA4KSwgdG9wUmlnaHRCb3R0b21SaWdodEZvcm1hdEluZm9CaXRzKTtcbiAgfVxuXG4gIGxldCBiZXN0RGlmZmVyZW5jZSA9IEluZmluaXR5O1xuICBsZXQgYmVzdEZvcm1hdEluZm8gPSBudWxsO1xuICBmb3IgKGNvbnN0IHtiaXRzLCBmb3JtYXRJbmZvfSBvZiBGT1JNQVRfSU5GT19UQUJMRSkge1xuICAgIGlmIChiaXRzID09PSB0b3BMZWZ0Rm9ybWF0SW5mb0JpdHMgfHwgYml0cyA9PT0gdG9wUmlnaHRCb3R0b21SaWdodEZvcm1hdEluZm9CaXRzKSB7XG4gICAgICByZXR1cm4gZm9ybWF0SW5mbztcbiAgICB9XG4gICAgbGV0IGRpZmZlcmVuY2UgPSBudW1CaXRzRGlmZmVyaW5nKHRvcExlZnRGb3JtYXRJbmZvQml0cywgYml0cyk7XG4gICAgaWYgKGRpZmZlcmVuY2UgPCBiZXN0RGlmZmVyZW5jZSkge1xuICAgICAgYmVzdEZvcm1hdEluZm8gPSBmb3JtYXRJbmZvO1xuICAgICAgYmVzdERpZmZlcmVuY2UgPSBkaWZmZXJlbmNlO1xuICAgIH1cbiAgICBpZiAodG9wTGVmdEZvcm1hdEluZm9CaXRzICE9PSB0b3BSaWdodEJvdHRvbVJpZ2h0Rm9ybWF0SW5mb0JpdHMpIHsgLy8gYWxzbyB0cnkgdGhlIG90aGVyIG9wdGlvblxuICAgICAgZGlmZmVyZW5jZSA9IG51bUJpdHNEaWZmZXJpbmcodG9wUmlnaHRCb3R0b21SaWdodEZvcm1hdEluZm9CaXRzLCBiaXRzKTtcbiAgICAgIGlmIChkaWZmZXJlbmNlIDwgYmVzdERpZmZlcmVuY2UpIHtcbiAgICAgICAgYmVzdEZvcm1hdEluZm8gPSBmb3JtYXRJbmZvO1xuICAgICAgICBiZXN0RGlmZmVyZW5jZSA9IGRpZmZlcmVuY2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIEhhbW1pbmcgZGlzdGFuY2Ugb2YgdGhlIDMyIG1hc2tlZCBjb2RlcyBpcyA3LCBieSBjb25zdHJ1Y3Rpb24sIHNvIDw9IDMgYml0cyBkaWZmZXJpbmcgbWVhbnMgd2UgZm91bmQgYSBtYXRjaFxuICBpZiAoYmVzdERpZmZlcmVuY2UgPD0gMykge1xuICAgIHJldHVybiBiZXN0Rm9ybWF0SW5mbztcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YUJsb2Nrcyhjb2Rld29yZHM6IG51bWJlcltdLCB2ZXJzaW9uOiBWZXJzaW9uLCBlY0xldmVsOiBudW1iZXIpIHtcbiAgY29uc3QgZWNJbmZvID0gdmVyc2lvbi5lcnJvckNvcnJlY3Rpb25MZXZlbHNbZWNMZXZlbF07XG4gIGNvbnN0IGRhdGFCbG9ja3M6IEFycmF5PHtcbiAgICBudW1EYXRhQ29kZXdvcmRzOiBudW1iZXI7XG4gICAgY29kZXdvcmRzOiBudW1iZXJbXTtcbiAgfT4gPSBbXTtcblxuICBsZXQgdG90YWxDb2Rld29yZHMgPSAwO1xuICBlY0luZm8uZWNCbG9ja3MuZm9yRWFjaChibG9jayA9PiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBibG9jay5udW1CbG9ja3M7IGkrKykge1xuICAgICAgZGF0YUJsb2Nrcy5wdXNoKHsgbnVtRGF0YUNvZGV3b3JkczogYmxvY2suZGF0YUNvZGV3b3Jkc1BlckJsb2NrLCBjb2Rld29yZHM6IFtdIH0pO1xuICAgICAgdG90YWxDb2Rld29yZHMgKz0gYmxvY2suZGF0YUNvZGV3b3Jkc1BlckJsb2NrICsgZWNJbmZvLmVjQ29kZXdvcmRzUGVyQmxvY2s7XG4gICAgfVxuICB9KTtcblxuICAvLyBJbiBzb21lIGNhc2VzIHRoZSBRUiBjb2RlIHdpbGwgYmUgbWFsZm9ybWVkIGVub3VnaCB0aGF0IHdlIHB1bGwgb2ZmIG1vcmUgb3IgbGVzcyB0aGFuIHdlIHNob3VsZC5cbiAgLy8gSWYgd2UgcHVsbCBvZmYgbGVzcyB0aGVyZSdzIG5vdGhpbmcgd2UgY2FuIGRvLlxuICAvLyBJZiB3ZSBwdWxsIG9mZiBtb3JlIHdlIGNhbiBzYWZlbHkgdHJ1bmNhdGVcbiAgaWYgKGNvZGV3b3Jkcy5sZW5ndGggPCB0b3RhbENvZGV3b3Jkcykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvZGV3b3JkcyA9IGNvZGV3b3Jkcy5zbGljZSgwLCB0b3RhbENvZGV3b3Jkcyk7XG5cbiAgY29uc3Qgc2hvcnRCbG9ja1NpemUgPSBlY0luZm8uZWNCbG9ja3NbMF0uZGF0YUNvZGV3b3Jkc1BlckJsb2NrO1xuICAvLyBQdWxsIGNvZGV3b3JkcyB0byBmaWxsIHRoZSBibG9ja3MgdXAgdG8gdGhlIG1pbmltdW0gc2l6ZVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNob3J0QmxvY2tTaXplOyBpKyspIHtcbiAgICBmb3IgKGNvbnN0IGRhdGFCbG9jayBvZiBkYXRhQmxvY2tzKSB7XG4gICAgICBkYXRhQmxvY2suY29kZXdvcmRzLnB1c2goY29kZXdvcmRzLnNoaWZ0KCkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIElmIHRoZXJlIGFyZSBhbnkgbGFyZ2UgYmxvY2tzLCBwdWxsIGNvZGV3b3JkcyB0byBmaWxsIHRoZSBsYXN0IGVsZW1lbnQgb2YgdGhvc2VcbiAgaWYgKGVjSW5mby5lY0Jsb2Nrcy5sZW5ndGggPiAxKSB7XG4gICAgY29uc3Qgc21hbGxCbG9ja0NvdW50ID0gZWNJbmZvLmVjQmxvY2tzWzBdLm51bUJsb2NrcztcbiAgICBjb25zdCBsYXJnZUJsb2NrQ291bnQgPSBlY0luZm8uZWNCbG9ja3NbMV0ubnVtQmxvY2tzO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGFyZ2VCbG9ja0NvdW50OyBpKyspIHtcbiAgICAgIGRhdGFCbG9ja3Nbc21hbGxCbG9ja0NvdW50ICsgaV0uY29kZXdvcmRzLnB1c2goY29kZXdvcmRzLnNoaWZ0KCkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCB0aGUgcmVzdCBvZiB0aGUgY29kZXdvcmRzIHRvIHRoZSBibG9ja3MuIFRoZXNlIGFyZSB0aGUgZXJyb3IgY29ycmVjdGlvbiBjb2Rld29yZHMuXG4gIHdoaWxlIChjb2Rld29yZHMubGVuZ3RoID4gMCkge1xuICAgIGZvciAoY29uc3QgZGF0YUJsb2NrIG9mIGRhdGFCbG9ja3MpIHtcbiAgICAgIGRhdGFCbG9jay5jb2Rld29yZHMucHVzaChjb2Rld29yZHMuc2hpZnQoKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGFCbG9ja3M7XG59XG5cbmZ1bmN0aW9uIGRlY29kZU1hdHJpeChtYXRyaXg6IEJpdE1hdHJpeCkge1xuICBjb25zdCB2ZXJzaW9uID0gcmVhZFZlcnNpb24obWF0cml4KTtcbiAgaWYgKCF2ZXJzaW9uKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBmb3JtYXRJbmZvID0gcmVhZEZvcm1hdEluZm9ybWF0aW9uKG1hdHJpeCk7XG4gIGlmICghZm9ybWF0SW5mbykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgY29kZXdvcmRzID0gcmVhZENvZGV3b3JkcyhtYXRyaXgsIHZlcnNpb24sIGZvcm1hdEluZm8pO1xuICBjb25zdCBkYXRhQmxvY2tzID0gZ2V0RGF0YUJsb2Nrcyhjb2Rld29yZHMsIHZlcnNpb24sIGZvcm1hdEluZm8uZXJyb3JDb3JyZWN0aW9uTGV2ZWwpO1xuICBpZiAoIWRhdGFCbG9ja3MpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIENvdW50IHRvdGFsIG51bWJlciBvZiBkYXRhIGJ5dGVzXG4gIGNvbnN0IHRvdGFsQnl0ZXMgPSBkYXRhQmxvY2tzLnJlZHVjZSgoYSwgYikgPT4gYSArIGIubnVtRGF0YUNvZGV3b3JkcywgMCk7XG4gIGNvbnN0IHJlc3VsdEJ5dGVzID0gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KHRvdGFsQnl0ZXMpO1xuXG4gIGxldCByZXN1bHRJbmRleCA9IDA7XG4gIGZvciAoY29uc3QgZGF0YUJsb2NrIG9mIGRhdGFCbG9ja3MpIHtcbiAgICBjb25zdCBjb3JyZWN0ZWRCeXRlcyA9IHJzRGVjb2RlKGRhdGFCbG9jay5jb2Rld29yZHMsIGRhdGFCbG9jay5jb2Rld29yZHMubGVuZ3RoIC0gZGF0YUJsb2NrLm51bURhdGFDb2Rld29yZHMpO1xuICAgIGlmICghY29ycmVjdGVkQnl0ZXMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGFCbG9jay5udW1EYXRhQ29kZXdvcmRzOyBpKyspIHtcbiAgICAgIHJlc3VsdEJ5dGVzW3Jlc3VsdEluZGV4KytdID0gY29ycmVjdGVkQnl0ZXNbaV07XG4gICAgfVxuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlRGF0YShyZXN1bHRCeXRlcywgdmVyc2lvbi52ZXJzaW9uTnVtYmVyKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZShtYXRyaXg6IEJpdE1hdHJpeCk6IERlY29kZWRRUiB7XG4gIGlmIChtYXRyaXggPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IHJlc3VsdCA9IGRlY29kZU1hdHJpeChtYXRyaXgpO1xuICBpZiAocmVzdWx0KSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICAvLyBEZWNvZGluZyBkaWRuJ3Qgd29yaywgdHJ5IG1pcnJvcmluZyB0aGUgUVIgYWNyb3NzIHRoZSB0b3BMZWZ0IC0+IGJvdHRvbVJpZ2h0IGxpbmUuXG4gIGZvciAobGV0IHggPSAwOyB4IDwgbWF0cml4LndpZHRoOyB4KyspIHtcbiAgICBmb3IgKGxldCB5ID0geCArIDE7IHkgPCBtYXRyaXguaGVpZ2h0OyB5KyspIHtcbiAgICAgIGlmIChtYXRyaXguZ2V0KHgsIHkpICE9PSBtYXRyaXguZ2V0KHksIHgpKSB7XG4gICAgICAgIG1hdHJpeC5zZXQoeCwgeSwgIW1hdHJpeC5nZXQoeCwgeSkpO1xuICAgICAgICBtYXRyaXguc2V0KHksIHgsICFtYXRyaXguZ2V0KHksIHgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlY29kZU1hdHJpeChtYXRyaXgpO1xufVxuIl19