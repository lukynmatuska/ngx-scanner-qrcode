import GenericGFPoly from "./GenericGFPoly";
export function addOrSubtractGF(a, b) {
    return a ^ b; // tslint:disable-line:no-bitwise
}
export default class GenericGF {
    constructor(primitive, size, genBase) {
        this.primitive = primitive;
        this.size = size;
        this.generatorBase = genBase;
        this.expTable = new Array(this.size);
        this.logTable = new Array(this.size);
        let x = 1;
        for (let i = 0; i < this.size; i++) {
            this.expTable[i] = x;
            x = x * 2;
            if (x >= this.size) {
                x = (x ^ this.primitive) & (this.size - 1); // tslint:disable-line:no-bitwise
            }
        }
        for (let i = 0; i < this.size - 1; i++) {
            this.logTable[this.expTable[i]] = i;
        }
        this.zero = new GenericGFPoly(this, Uint8ClampedArray.from([0]));
        this.one = new GenericGFPoly(this, Uint8ClampedArray.from([1]));
    }
    multiply(a, b) {
        if (a === 0 || b === 0) {
            return 0;
        }
        return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];
    }
    inverse(a) {
        if (a === 0) {
            throw new Error("Can't invert 0");
        }
        return this.expTable[this.size - this.logTable[a] - 1];
    }
    buildMonomial(degree, coefficient) {
        if (degree < 0) {
            throw new Error("Invalid monomial degree less than 0");
        }
        if (coefficient === 0) {
            return this.zero;
        }
        const coefficients = new Uint8ClampedArray(degree + 1);
        coefficients[0] = coefficient;
        return new GenericGFPoly(this, coefficients);
    }
    log(a) {
        if (a === 0) {
            throw new Error("Can't take log(0)");
        }
        return this.logTable[a];
    }
    exp(a) {
        return this.expTable[a];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2VuZXJpY0dGLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXNjYW5uZXItcXJjb2RlL3NyYy9saWIvcXJjb2RlL2RlY29kZXIvcmVlZHNvbG9tb24vR2VuZXJpY0dGLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sYUFBYSxNQUFNLGlCQUFpQixDQUFDO0FBRTVDLE1BQU0sVUFBVSxlQUFlLENBQUMsQ0FBUyxFQUFFLENBQVM7SUFDbEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsaUNBQWlDO0FBQ2pELENBQUM7QUFFRCxNQUFNLENBQUMsT0FBTyxPQUFPLFNBQVM7SUFVNUIsWUFBWSxTQUFpQixFQUFFLElBQVksRUFBRSxPQUFlO1FBQzFELElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDO1FBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXJDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3JCLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ1YsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDbEIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQ0FBaUM7YUFDOUU7U0FDRjtRQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN0QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDckM7UUFDRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLGFBQWEsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFTSxRQUFRLENBQUMsQ0FBUyxFQUFFLENBQVM7UUFDbEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDdEIsT0FBTyxDQUFDLENBQUM7U0FDVjtRQUNELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFTSxPQUFPLENBQUMsQ0FBUztRQUN0QixJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDWCxNQUFNLElBQUksS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7U0FDbkM7UUFDRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFTSxhQUFhLENBQUMsTUFBYyxFQUFFLFdBQW1CO1FBQ3RELElBQUksTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQztTQUN4RDtRQUNELElBQUksV0FBVyxLQUFLLENBQUMsRUFBRTtZQUNyQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDbEI7UUFDRCxNQUFNLFlBQVksR0FBRyxJQUFJLGlCQUFpQixDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2RCxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO1FBQzlCLE9BQU8sSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFTSxHQUFHLENBQUMsQ0FBUztRQUNsQixJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDWCxNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7U0FDdEM7UUFDRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVNLEdBQUcsQ0FBQyxDQUFTO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgR2VuZXJpY0dGUG9seSBmcm9tIFwiLi9HZW5lcmljR0ZQb2x5XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRPclN1YnRyYWN0R0YoYTogbnVtYmVyLCBiOiBudW1iZXIpIHtcbiAgcmV0dXJuIGEgXiBiOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLWJpdHdpc2Vcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2VuZXJpY0dGIHtcbiAgcHVibGljIHByaW1pdGl2ZTogbnVtYmVyO1xuICBwdWJsaWMgc2l6ZTogbnVtYmVyO1xuICBwdWJsaWMgZ2VuZXJhdG9yQmFzZTogbnVtYmVyO1xuICBwdWJsaWMgemVybzogR2VuZXJpY0dGUG9seTtcbiAgcHVibGljIG9uZTogR2VuZXJpY0dGUG9seTtcblxuICBwcml2YXRlIGV4cFRhYmxlOiBudW1iZXJbXTtcbiAgcHJpdmF0ZSBsb2dUYWJsZTogbnVtYmVyW107XG5cbiAgY29uc3RydWN0b3IocHJpbWl0aXZlOiBudW1iZXIsIHNpemU6IG51bWJlciwgZ2VuQmFzZTogbnVtYmVyKSB7XG4gICAgdGhpcy5wcmltaXRpdmUgPSBwcmltaXRpdmU7XG4gICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgICB0aGlzLmdlbmVyYXRvckJhc2UgPSBnZW5CYXNlO1xuICAgIHRoaXMuZXhwVGFibGUgPSBuZXcgQXJyYXkodGhpcy5zaXplKTtcbiAgICB0aGlzLmxvZ1RhYmxlID0gbmV3IEFycmF5KHRoaXMuc2l6ZSk7XG5cbiAgICBsZXQgeCA9IDE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNpemU7IGkrKykge1xuICAgICAgdGhpcy5leHBUYWJsZVtpXSA9IHg7XG4gICAgICB4ID0geCAqIDI7XG4gICAgICBpZiAoeCA+PSB0aGlzLnNpemUpIHtcbiAgICAgICAgeCA9ICh4IF4gdGhpcy5wcmltaXRpdmUpICYgKHRoaXMuc2l6ZSAtIDEpOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLWJpdHdpc2VcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2l6ZSAtIDE7IGkrKykge1xuICAgICAgdGhpcy5sb2dUYWJsZVt0aGlzLmV4cFRhYmxlW2ldXSA9IGk7XG4gICAgfVxuICAgIHRoaXMuemVybyA9IG5ldyBHZW5lcmljR0ZQb2x5KHRoaXMsIFVpbnQ4Q2xhbXBlZEFycmF5LmZyb20oWzBdKSk7XG4gICAgdGhpcy5vbmUgPSBuZXcgR2VuZXJpY0dGUG9seSh0aGlzLCBVaW50OENsYW1wZWRBcnJheS5mcm9tKFsxXSkpO1xuICB9XG5cbiAgcHVibGljIG11bHRpcGx5KGE6IG51bWJlciwgYjogbnVtYmVyKSB7XG4gICAgaWYgKGEgPT09IDAgfHwgYiA9PT0gMCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmV4cFRhYmxlWyh0aGlzLmxvZ1RhYmxlW2FdICsgdGhpcy5sb2dUYWJsZVtiXSkgJSAodGhpcy5zaXplIC0gMSldO1xuICB9XG5cbiAgcHVibGljIGludmVyc2UoYTogbnVtYmVyKSB7XG4gICAgaWYgKGEgPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IGludmVydCAwXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5leHBUYWJsZVt0aGlzLnNpemUgLSB0aGlzLmxvZ1RhYmxlW2FdIC0gMV07XG4gIH1cblxuICBwdWJsaWMgYnVpbGRNb25vbWlhbChkZWdyZWU6IG51bWJlciwgY29lZmZpY2llbnQ6IG51bWJlcik6IEdlbmVyaWNHRlBvbHkge1xuICAgIGlmIChkZWdyZWUgPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIG1vbm9taWFsIGRlZ3JlZSBsZXNzIHRoYW4gMFwiKTtcbiAgICB9XG4gICAgaWYgKGNvZWZmaWNpZW50ID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy56ZXJvO1xuICAgIH1cbiAgICBjb25zdCBjb2VmZmljaWVudHMgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkoZGVncmVlICsgMSk7XG4gICAgY29lZmZpY2llbnRzWzBdID0gY29lZmZpY2llbnQ7XG4gICAgcmV0dXJuIG5ldyBHZW5lcmljR0ZQb2x5KHRoaXMsIGNvZWZmaWNpZW50cyk7XG4gIH1cblxuICBwdWJsaWMgbG9nKGE6IG51bWJlcikge1xuICAgIGlmIChhID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCB0YWtlIGxvZygwKVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubG9nVGFibGVbYV07XG4gIH1cblxuICBwdWJsaWMgZXhwKGE6IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLmV4cFRhYmxlW2FdO1xuICB9XG59XG4iXX0=